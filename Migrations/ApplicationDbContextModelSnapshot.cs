// <auto-generated />
using System;
using GasStationApp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GasStationApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FuelPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GasType")
                        .HasColumnType("int");

                    b.Property<double>("PricePerLiter")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("FuelPrices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GasType = 1,
                            PricePerLiter = 20.5
                        },
                        new
                        {
                            Id = 2,
                            GasType = 2,
                            PricePerLiter = 18.300000000000001
                        },
                        new
                        {
                            Id = 3,
                            GasType = 3,
                            PricePerLiter = 22.100000000000001
                        },
                        new
                        {
                            Id = 4,
                            GasType = 4,
                            PricePerLiter = 21.0
                        },
                        new
                        {
                            Id = 5,
                            GasType = 5,
                            PricePerLiter = 19.5
                        });
                });

            modelBuilder.Entity("SaleRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GasType")
                        .HasColumnType("int");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("SoldFuel")
                        .HasColumnType("float");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SaleRecords");
                });

            modelBuilder.Entity("StorageInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AddedFuel")
                        .HasColumnType("float");

                    b.Property<int>("GasType")
                        .HasColumnType("int");

                    b.Property<double>("Occupancy")
                        .HasColumnType("float");

                    b.Property<double>("TotalCapacity")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId");

                    b.ToTable("Storages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedFuel = 0.0,
                            GasType = 1,
                            Occupancy = 0.0,
                            TotalCapacity = 10000.0,
                            UserId = 0
                        },
                        new
                        {
                            Id = 2,
                            AddedFuel = 0.0,
                            GasType = 2,
                            Occupancy = 0.0,
                            TotalCapacity = 10000.0,
                            UserId = 0
                        },
                        new
                        {
                            Id = 3,
                            AddedFuel = 0.0,
                            GasType = 3,
                            Occupancy = 0.0,
                            TotalCapacity = 10000.0,
                            UserId = 0
                        },
                        new
                        {
                            Id = 4,
                            AddedFuel = 0.0,
                            GasType = 4,
                            Occupancy = 0.0,
                            TotalCapacity = 10000.0,
                            UserId = 0
                        },
                        new
                        {
                            Id = 5,
                            AddedFuel = 0.0,
                            GasType = 5,
                            Occupancy = 0.0,
                            TotalCapacity = 10000.0,
                            UserId = 0
                        });
                });

            modelBuilder.Entity("UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyTaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StationCode")
                        .HasColumnType("int");

                    b.Property<string>("StationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SaleRecord", b =>
                {
                    b.HasOne("UserModel", "Users")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("StorageInfo", b =>
                {
                    b.HasOne("UserModel", null)
                        .WithMany("Storages")
                        .HasForeignKey("UserModelId");
                });

            modelBuilder.Entity("UserModel", b =>
                {
                    b.Navigation("Storages");
                });
#pragma warning restore 612, 618
        }
    }
}
